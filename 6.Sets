In Python, Set is an unordered collection of data type that is iterable, mutable and has no duplicate elements. The order of elements in a set is undefined though it may consist of various elements.

The major advantage of using a set, as opposed to a list, is that it has a highly optimized method for checking whether a specific element is contained in the set.

Set Methods
FUNCTION	                        DESCRIPTION
===========================================================================================================================================
add()	                            Adds an element to a set
remove()	                        Removes an element from a set. If the element is not present in the set, raise a KeyError
clear()	                            Removes all elements form a set
copy()	                            Returns a shallow copy of a set
pop()	                            Removes and returns an arbitrary set element. Raise KeyError if the set is empty
update()	                        Updates a set with the union of itself and others
union()	                            Returns the union of sets in a new set
difference()	                    Returns the difference of two or more sets as a new set
difference_update() 	            Removes all elements of another set from this set
discard()	                        Removes an element from set if it is a member. (Do nothing if the element is not in set)
intersection()	                    Returns the intersection of two sets as a new set
intersection_update()	            Updates the set with the intersection of itself and another
isdisjoint()	                    Returns True if two sets have a null intersection
issubset()	                        Returns True if another set contains this set
issuperset()	                    Returns True if this set contains another set
symmetric_difference()	            Returns the symmetric difference of two sets as a new set
symmetric_difference_update()	    Updates a set with the symmetric difference of itself and another   
===========================================================================================================================================


s=set()
print(type(s))
s.add(1)
s.add(2)
print(s)
s.update([9,8,7,6,5,4])
print("after the modifications",s)
s.remove(7)
#s.discard(7)
print("after the modifications",s)
#s.clear()
#print(max(s))
print("after the modifications",s)
#s1=s.intersection({1,2,35,7,8})
#s1=s.union({1,2,35,7,8})
print("after the modificatiosn",s1)


