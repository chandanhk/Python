Sr.No.	Methods with Description
1	os.access(path, mode)
Use the real uid/gid to test for access to path.

2	os.chdir(path)
Change the current working directory to path

3	os.chflags(path, flags)
Set the flags of path to the numeric flags.

4	os.chmod(path, mode)
Change the mode of path to the numeric mode.

5	os.chown(path, uid, gid)
Change the owner and group id of path to the numeric uid and gid.

6	os.chroot(path)
Change the root directory of the current process to path.

7	os.close(fd)
Close file descriptor fd.

8	os.closerange(fd_low, fd_high)
Close all file descriptors from fd_low (inclusive) to fd_high (exclusive), ignoring errors.

9	os.dup(fd)
Return a duplicate of file descriptor fd.

10	os.dup2(fd, fd2)
Duplicate file descriptor fd to fd2, closing the latter first if necessary.

11	os.fchdir(fd)
Change the current working directory to the directory represented by the file descriptor fd.

12	os.fchmod(fd, mode)
Change the mode of the file given by fd to the numeric mode.

13	os.fchown(fd, uid, gid)
Change the owner and group id of the file given by fd to the numeric uid and gid.

14	os.fdatasync(fd)
Force write of file with filedescriptor fd to disk.

15	os.fdopen(fd[, mode[, bufsize]])
Return an open file object connected to the file descriptor fd.

16	os.fpathconf(fd, name)
Return system configuration information relevant to an open file. name specifies the configuration value to retrieve.

17	os.fstat(fd)
Return status for file descriptor fd, like stat().

18	os.fstatvfs(fd)
Return information about the filesystem containing the file associated with file descriptor fd, like statvfs().

19	os.fsync(fd)
Force write of file with filedescriptor fd to disk.

20	os.ftruncate(fd, length)
Truncate the file corresponding to file descriptor fd, so that it is at most length bytes in size.

21	os.getcwd()
Return a string representing the current working directory.

22	os.getcwdu()
Return a Unicode object representing the current working directory.

23	os.isatty(fd)
Return True if the file descriptor fd is open and connected to a tty(-like) device, else False.

24	os.lchflags(path, flags)
Set the flags of path to the numeric flags, like chflags(), but do not follow symbolic links.

25	os.lchmod(path, mode)
Change the mode of path to the numeric mode.

26	os.lchown(path, uid, gid)
Change the owner and group id of path to the numeric uid and gid. This function will not follow symbolic links.

27	os.link(src, dst)
Create a hard link pointing to src named dst.

28	os.listdir(path)
Return a list containing the names of the entries in the directory given by path.

29	os.lseek(fd, pos, how)
Set the current position of file descriptor fd to position pos, modified by how.

30	os.lstat(path)
Like stat(), but do not follow symbolic links.

31	os.major(device)
Extract the device major number from a raw device number.

32	os.makedev(major, minor)
Compose a raw device number from the major and minor device numbers.

33	os.makedirs(path[, mode])
Recursive directory creation function.

34	os.minor(device)
Extract the device minor number from a raw device number.

35	os.mkdir(path[, mode])
Create a directory named path with numeric mode mode.

36	os.mkfifo(path[, mode])
Create a FIFO (a named pipe) named path with numeric mode mode. The default mode is 0666 (octal).

37	os.mknod(filename[, mode=0600, device])
Create a filesystem node (file, device special file or named pipe) named filename.

38	os.open(file, flags[, mode])
Open the file file and set various flags according to flags and possibly its mode according to mode.

39	os.openpty()
Open a new pseudo-terminal pair. Return a pair of file descriptors (master, slave) for the pty and the tty, respectively.

40	os.pathconf(path, name)
Return system configuration information relevant to a named file.

41	os.pipe()
Create a pipe. Return a pair of file descriptors (r, w) usable for reading and writing, respectively.

42	os.popen(command[, mode[, bufsize]])
Open a pipe to or from command.

43	os.read(fd, n)
Read at most n bytes from file descriptor fd. Return a string containing the bytes read. If the end of the file referred to by fd has been reached, an empty string is returned.

44	os.readlink(path)
Return a string representing the path to which the symbolic link points.

45	os.remove(path)
Remove the file path.

46	os.removedirs(path)
Remove directories recursively.

47	os.rename(src, dst)
Rename the file or directory src to dst.

48	os.renames(old, new)
Recursive directory or file renaming function.

49	os.rmdir(path)
Remove the directory path

50	os.stat(path)
Perform a stat system call on the given path.

51	os.stat_float_times([newvalue])
Determine whether stat_result represents time stamps as float objects.

52	os.statvfs(path)
Perform a statvfs system call on the given path.

53	os.symlink(src, dst)
Create a symbolic link pointing to src named dst.

54	os.tcgetpgrp(fd)
Return the process group associated with the terminal given by fd (an open file descriptor as returned by open()).

55	os.tcsetpgrp(fd, pg)
Set the process group associated with the terminal given by fd (an open file descriptor as returned by open()) to pg.

56	os.tempnam([dir[, prefix]])
Return a unique path name that is reasonable for creating a temporary file.

57	os.tmpfile()
Return a new file object opened in update mode (w+b).

58	os.tmpnam()
Return a unique path name that is reasonable for creating a temporary file.

59	os.ttyname(fd)
Return a string which specifies the terminal device associated with file descriptor fd. If fd is not associated with a terminal device, an exception is raised.

60	os.unlink(path)
Remove the file path.

61	os.utime(path, times)
Set the access and modified times of the file specified by path.

62	os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])
Generate the file names in a directory tree by walking the tree either top-down or bottom-up.

63	os.write(fd, str)
Write the string str to file descriptor fd. Return the number of bytes actually written.



--------------------------------------------------------------
Python OS module
Renaming the file
The Python os module enables interaction with the operating system. The os module provides the functions that are involved in file processing operations like renaming, deleting, etc. It provides us the rename() method to rename the specified file to a new name. The syntax to use the rename() method is given below.

Syntax:

rename(current-name, new-name)    
The first argument is the current file name and the second argument is the modified name. We can change the file name bypassing these two arguments.

Example 1:

import os    
    
#rename file2.txt to file3.txt    
os.rename("file2.txt","file3.txt")  
Output:


The above code renamed current file2.txt to file3.txt

Removing the file
The os module provides the remove() method which is used to remove the specified file. The syntax to use the remove() method is given below.

remove(file-name)   
Example 1

import os;    
#deleting the file named file3.txt     
os.remove("file3.txt")    
Creating the new directory
The mkdir() method is used to create the directories in the current working directory. The syntax to create the new directory is given below.

Syntax:

mkdir(directory name)  
Example 1

import os    
    
#creating a new directory with the name new    
os.mkdir("new")    
The getcwd() method
This method returns the current working directory.

The syntax to use the getcwd() method is given below.

Syntax

os.getcwd()  
Example

import os  
os.getcwd()  
Output:

'C:\\Users\\DEVANSH SHARMA'
Changing the current working directory
The chdir() method is used to change the current working directory to a specified directory.

The syntax to use the chdir() method is given below.

Syntax

chdir("new-directory")    
Example
import os   
# Changing current directory with the new directiory  
os.chdir("C:\\Users\\DEVANSH SHARMA\\Documents")  
#It will display the current working directory  
os.getcwd()  
Output:

'C:\\Users\\DEVANSH SHARMA\\Documents'
Deleting directory
The rmdir() method is used to delete the specified directory.

The syntax to use the rmdir() method is given below.

Syntax

os.rmdir(directory name)    
Example 1

import os  
#removing the new directory     
os.rmdir("directory_name")    
It will remove the specified directory.

Writing Python output to the files
In Python, there are the requirements to write the output of a Python script to a file.

The check_call() method of module subprocess is used to execute a Python script and write the output of that script to a file.

The following example contains two python scripts. The script file1.py executes the script file.py and writes its output to the text file output.txt.

Example

file.py

temperatures=[10,-20,-289,100]    
def c_to_f(c):    
    if c< -273.15:    
        return "That temperature doesn't make sense!"    
    else:    
        f=c*9/5+32    
        return f    
for t in temperatures:    
    print(c_to_f(t))    
file.py

import subprocess    
    
with open("output.txt", "wb") as f:    
    subprocess.check_call(["python", "file.py"], stdout=f)    
The file related methods
The file object provides the following methods to manipulate the files on various operating systems.

SN	Method	Description
1	file.close()	It closes the opened file. The file once closed, it can't be read or write anymore.
2	File.fush()	It flushes the internal buffer.
3	File.fileno()	It returns the file descriptor used by the underlying implementation to request I/O from the OS.
4	File.isatty()	It returns true if the file is connected to a TTY device, otherwise returns false.
5	File.next()	It returns the next line from the file.
6	File.read([size])	It reads the file for the specified size.
7	File.readline([size])	It reads one line from the file and places the file pointer to the beginning of the new line.
8	File.readlines([sizehint])	It returns a list containing all the lines of the file. It reads the file until the EOF occurs using readline() function.
9	File.seek(offset[,from)	It modifies the position of the file pointer to a specified offset with the specified reference.
10	File.tell()	It returns the current position of the file pointer within the file.
11	File.truncate([size])	It truncates the file to the optional specified size.
12	File.write(str)	It writes the specified string to a file
13	File.writelines(seq)	It writes a sequence of the strings to a file.



---------------------------------------FILE++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Sr.No.	Methods with Description
1	file.close()
Close the file. A closed file cannot be read or written any more.

2	file.flush()
Flush the internal buffer, like stdio's fflush. This may be a no-op on some file-like objects.

3	file.fileno()
Returns the integer file descriptor that is used by the underlying implementation to request I/O operations from the operating system.

4	file.isatty()
Returns True if the file is connected to a tty(-like) device, else False.

5	file.next()
Returns the next line from the file each time it is being called.

6	file.read([size])
Reads at most size bytes from the file (less if the read hits EOF before obtaining size bytes).

7	file.readline([size])
Reads one entire line from the file. A trailing newline character is kept in the string.

8	file.readlines([sizehint])
Reads until EOF using readline() and return a list containing the lines. If the optional sizehint argument is present, instead of reading up to EOF, whole lines totalling approximately sizehint bytes (possibly after rounding up to an internal buffer size) are read.

9	file.seek(offset[, whence])
Sets the file's current position

10	file.tell()
Returns the file's current position

11	file.truncate([size])
Truncates the file's size. If the optional size argument is present, the file is truncated to (at most) that size.

12	file.write(str)
Writes a string to the file. There is no return value.

13	file.writelines(sequence)
Writes a sequence of strings to the file. The sequence can be any iterable object producing strings, typically a list of strings.

