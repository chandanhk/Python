There are two methods to use functions or variables after importing:
The first one is to import using an object. For this, we usually import the whole module by using a simple import statement. When we use only the import keyword, we will import the resource directly, like this:
import sklearn
When we use the second syntax, we will import the resource from another package or module. Here is an example:
from flask import Flask
We can also choose to rename an imported resource, like this:

import pandas as pd
This renames the imported resource pandas to pd. 

We can not access it using pandas keyword; instead, we have to use pd or the compiler will show an error. This case comes in handy when the module name is difficult or lengthy, and we have to use a module again and again to call its functions.

Note: import module as module_name does not rename the module originally but only for a specific program where it is imported using this sort of keyword.

Disadvantages:
One of the major disadvantages of the flexibility provided by a python in the case of modules is that they can be easily modified and overridden. Along with disrupting the functionality of the program, it also poses a major security risk.

Code file1 as described in the video
from sklearn.ensemble import RandomForestClassifier
print(RandomForestClassifier())


import file2
print(file2.a)

file2.printjoke("This is me")
  
Code file2 as described in the video
a =7
def printjoke(str):
    print(f"this function is a joke {str}")
  
---------------------------------------------------------------------------------------------------------------------  
